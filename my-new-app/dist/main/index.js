"use strict";
const electron = require("electron");
const os = require("os");
const path = require("path");
electron.crashReporter.start({
  productName: "aigc starter",
  companyName: "weehel",
  submitURL: "https://www.weehel.com",
  uploadToServer: false,
  ignoreSystemCrashHandler: false
});
let crashFilePath = "";
let crashDumpsDir = "";
try {
  crashFilePath = path.join(electron.app.getPath("temp"), electron.app.getName() + " Crashes");
  console.log("————————crash path:", crashFilePath);
  crashDumpsDir = electron.app.getPath("crashDumps");
  console.log("————————crashDumpsDir:", crashDumpsDir);
} catch (e) {
  console.error("获取奔溃文件路径失败", e);
}
const PROTOCOL = "tuiroom";
if (os.release().startsWith("6.1"))
  electron.app.disableHardwareAcceleration();
if (process.platform === "win32")
  electron.app.setAppUserModelId(electron.app.getName());
if (!electron.app.requestSingleInstanceLock()) {
  electron.app.quit();
  process.exit(0);
}
process.env["ELECTRON_DISABLE_SECURITY_WARNINGS"] = "true";
let isHasScreen = false;
async function checkAndApplyDevicePrivilege() {
  const screenPrivilege = electron.systemPreferences.getMediaAccessStatus("screen");
  console.log(screenPrivilege);
  if (screenPrivilege === "granted") {
    isHasScreen = true;
  }
}
let win = null;
let schemeRoomId = "";
function registerScheme() {
  const args = [];
  if (!electron.app.isPackaged) {
    args.push(path.resolve(process.argv[1]));
  }
  args.push("--");
  electron.app.setAsDefaultProtocolClient(PROTOCOL, process.execPath, args);
  handleArgv(process.argv);
}
function handleArgv(argv) {
  const prefix = `${PROTOCOL}:`;
  const offset = electron.app.isPackaged ? 1 : 2;
  const url = argv.find((arg, i) => i >= offset && arg.startsWith(prefix));
  if (url)
    handleUrl(url);
}
function handleUrl(url) {
  const urlObj = new URL(url);
  const { searchParams } = urlObj;
  schemeRoomId = searchParams.get("roomId") || "";
  if (win && win.webContents) {
    win == null ? void 0 : win.webContents.send("launch-room", schemeRoomId);
  }
}
async function createWindow() {
  await checkAndApplyDevicePrivilege();
  const { width, height } = electron.screen.getPrimaryDisplay().workAreaSize;
  win = new electron.BrowserWindow({
    title: "Main window",
    width,
    height,
    minWidth: 1200,
    minHeight: 640,
    webPreferences: {
      preload: path.join(__dirname, "../preload/index.cjs"),
      nodeIntegration: true,
      contextIsolation: false
    }
  });
  if (electron.app.isPackaged) {
    if (schemeRoomId) {
      win.loadFile(path.join(__dirname, `../renderer/index.html`), {
        hash: `home?roomId=${schemeRoomId}`
      });
    } else {
      win.loadFile(path.join(__dirname, "../renderer/index.html"));
    }
  } else {
    const installExtension = require("electron-devtools-installer");
    installExtension.default(installExtension.VUEJS_DEVTOOLS).then(() => {
    }).catch((err) => {
      console.log("Unable to install `vue-devtools`: \n", err);
    });
    const url = `http://${process.env["VITE_DEV_SERVER_HOST"]}:${process.env["VITE_DEV_SERVER_PORT"]}`;
    win.loadURL(url);
    win.webContents.openDevTools();
  }
  win.webContents.on("did-finish-load", () => {
    win == null ? void 0 : win.webContents.send("main-process-message", {
      isHasScreen
    });
  });
  win.webContents.setWindowOpenHandler(({ url }) => {
    if (url.startsWith("https:"))
      electron.shell.openExternal(url);
    return { action: "deny" };
  });
}
registerScheme();
electron.app.whenReady().then(createWindow);
electron.app.on("window-all-closed", () => {
  win = null;
  if (process.platform !== "darwin")
    electron.app.quit();
});
electron.app.on("second-instance", () => {
  if (win) {
    if (win.isMinimized())
      win.restore();
    win.focus();
  }
});
electron.app.on("activate", () => {
  const allWindows = electron.BrowserWindow.getAllWindows();
  if (allWindows.length) {
    allWindows[0].focus();
  } else {
    createWindow();
  }
});
electron.app.on("open-url", (event, urlStr) => {
  handleUrl(urlStr);
});
electron.ipcMain.handle("open-win", (event, arg) => {
  const childWindow = new electron.BrowserWindow({
    webPreferences: {
      preload: path.join(__dirname, "../preload/index.cjs")
    }
  });
  if (electron.app.isPackaged) {
    childWindow.loadFile(path.join(__dirname, `../renderer/index.html`), {
      hash: `${arg}`
    });
  } else {
    const url = `http://${process.env["VITE_DEV_SERVER_HOST"]}:${process.env["VITE_DEV_SERVER_PORT"]}/#${arg}`;
    childWindow.loadURL(url);
  }
});
electron.ipcMain.on("app-exit", () => {
  win == null ? void 0 : win.close();
  electron.app.exit();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
